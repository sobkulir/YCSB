package mdhim;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : mdhim-tng-ycsb/src/data_store.h:1000</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mdhim") 
public abstract class mdhim_stat extends StructObject {
	static {
		BridJ.register();
	}
	/** Key (slice number) */
	@Field(0) 
	public int key() {
		return this.io.getIntField(this, 0);
	}
	/** Key (slice number) */
	@Field(0) 
	public mdhim_stat key(int key) {
		this.io.setIntField(this, 0, key);
		return this;
	}
	/**
	 * Max key<br>
	 * C type : void*
	 */
	@Field(1) 
	public Pointer<? > max() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Max key<br>
	 * C type : void*
	 */
	@Field(1) 
	public mdhim_stat max(Pointer<? > max) {
		this.io.setPointerField(this, 1, max);
		return this;
	}
	/**
	 * Min key<br>
	 * C type : void*
	 */
	@Field(2) 
	public Pointer<? > min() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * Min key<br>
	 * C type : void*
	 */
	@Field(2) 
	public mdhim_stat min(Pointer<? > min) {
		this.io.setPointerField(this, 2, min);
		return this;
	}
	/** Number of keys in this slice */
	@Field(3) 
	public long num() {
		return this.io.getLongField(this, 3);
	}
	/** Number of keys in this slice */
	@Field(3) 
	public mdhim_stat num(long num) {
		this.io.setLongField(this, 3, num);
		return this;
	}
	/**
	 * Used for local index stats to create a multi-level hash table<br>
	 * C type : mdhim_stat*
	 */
	@Field(4) 
	public Pointer<mdhim_stat > stats() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * Used for local index stats to create a multi-level hash table<br>
	 * C type : mdhim_stat*
	 */
	@Field(4) 
	public mdhim_stat stats(Pointer<mdhim_stat > stats) {
		this.io.setPointerField(this, 4, stats);
		return this;
	}
	/** Conversion Error : UT_hash_handle (failed to convert type to Java (undefined type)) */
}
